plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'io.github.kobylynskyi.graphql.codegen' version '5.10.0'
}

checkstyle {
    toolVersion '7.8.1'
    configFile file("checkstyle.xml")
}

group = 'mvp-project'
version = "$version_project"

java {
    sourceCompatibility = '17'
}

repositories {
    mavenLocal()
    mavenCentral()

}

dependencies {

    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:$openapi_version",
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-data-jpa",
            "org.springframework.boot:spring-boot-starter-graphql",
            "org.modelmapper:modelmapper:$modelmaper_version",
            "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version",
            "org.springframework.kafka:spring-kafka",
            "com.graphql-java:graphql-java:$graphql_version",
            "com.graphql-java:graphql-java-extended-scalars:21.0",
            "io.leangen.graphql:spqr:0.12.1",
            "com.graphql-java:graphql-java-tools:5.2.4"
            )

    testImplementation("org.springframework.boot:spring-boot-starter-test",
            "org.junit.jupiter:junit-jupiter-api:$junit_version")
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    compileOnly "org.projectlombok:lombok:$lombok_version"
    annotationProcessor "org.projectlombok:lombok:$lombok_version"

    runtimeOnly "org.postgresql:postgresql"
}


test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "mvpproject/crmbaseservice/config/**",
                    "mvpproject/crmbaseservice/CrmBaseServiceApplication.java"
            ])
        }))
    }
}

